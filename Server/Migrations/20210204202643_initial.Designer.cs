// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server;

namespace Server.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20210204202643_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("ModelCourse.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("PreviousDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PreviousURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ValuteId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ValuteId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ModelCourse.Valute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AMDValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AUDValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AZNValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BGNValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BRLValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BYNValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CADValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CHFValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CNYValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CZKValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DKKValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EURValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("GBPValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("HKDValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("HUFValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("INRValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("JPYValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("KGSValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("KRWValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("KZTValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MDLValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("NOKValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PLNValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RONValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SEKValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SGDValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TJSValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TMTValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TRYValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UAHValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("USDValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UZSValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("XDRValuteValueId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ZARValuteValueId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AMDValuteValueId");

                    b.HasIndex("AUDValuteValueId");

                    b.HasIndex("AZNValuteValueId");

                    b.HasIndex("BGNValuteValueId");

                    b.HasIndex("BRLValuteValueId");

                    b.HasIndex("BYNValuteValueId");

                    b.HasIndex("CADValuteValueId");

                    b.HasIndex("CHFValuteValueId");

                    b.HasIndex("CNYValuteValueId");

                    b.HasIndex("CZKValuteValueId");

                    b.HasIndex("DKKValuteValueId");

                    b.HasIndex("EURValuteValueId");

                    b.HasIndex("GBPValuteValueId");

                    b.HasIndex("HKDValuteValueId");

                    b.HasIndex("HUFValuteValueId");

                    b.HasIndex("INRValuteValueId");

                    b.HasIndex("JPYValuteValueId");

                    b.HasIndex("KGSValuteValueId");

                    b.HasIndex("KRWValuteValueId");

                    b.HasIndex("KZTValuteValueId");

                    b.HasIndex("MDLValuteValueId");

                    b.HasIndex("NOKValuteValueId");

                    b.HasIndex("PLNValuteValueId");

                    b.HasIndex("RONValuteValueId");

                    b.HasIndex("SEKValuteValueId");

                    b.HasIndex("SGDValuteValueId");

                    b.HasIndex("TJSValuteValueId");

                    b.HasIndex("TMTValuteValueId");

                    b.HasIndex("TRYValuteValueId");

                    b.HasIndex("UAHValuteValueId");

                    b.HasIndex("USDValuteValueId");

                    b.HasIndex("UZSValuteValueId");

                    b.HasIndex("XDRValuteValueId");

                    b.HasIndex("ZARValuteValueId");

                    b.ToTable("Valutes");
                });

            modelBuilder.Entity("ModelCourse.ValuteValue", b =>
                {
                    b.Property<Guid>("ValuteValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CharCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("ID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Nominal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NumCode")
                        .HasColumnType("TEXT");

                    b.Property<double>("Previous")
                        .HasColumnType("REAL");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("ValuteValueId");

                    b.ToTable("ValuteValues");
                });

            modelBuilder.Entity("ModelCourse.Course", b =>
                {
                    b.HasOne("ModelCourse.Valute", "Valute")
                        .WithMany()
                        .HasForeignKey("ValuteId");

                    b.Navigation("Valute");
                });

            modelBuilder.Entity("ModelCourse.Valute", b =>
                {
                    b.HasOne("ModelCourse.ValuteValue", "AMD")
                        .WithMany()
                        .HasForeignKey("AMDValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "AUD")
                        .WithMany()
                        .HasForeignKey("AUDValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "AZN")
                        .WithMany()
                        .HasForeignKey("AZNValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "BGN")
                        .WithMany()
                        .HasForeignKey("BGNValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "BRL")
                        .WithMany()
                        .HasForeignKey("BRLValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "BYN")
                        .WithMany()
                        .HasForeignKey("BYNValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "CAD")
                        .WithMany()
                        .HasForeignKey("CADValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "CHF")
                        .WithMany()
                        .HasForeignKey("CHFValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "CNY")
                        .WithMany()
                        .HasForeignKey("CNYValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "CZK")
                        .WithMany()
                        .HasForeignKey("CZKValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "DKK")
                        .WithMany()
                        .HasForeignKey("DKKValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "EUR")
                        .WithMany()
                        .HasForeignKey("EURValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "GBP")
                        .WithMany()
                        .HasForeignKey("GBPValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "HKD")
                        .WithMany()
                        .HasForeignKey("HKDValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "HUF")
                        .WithMany()
                        .HasForeignKey("HUFValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "INR")
                        .WithMany()
                        .HasForeignKey("INRValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "JPY")
                        .WithMany()
                        .HasForeignKey("JPYValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "KGS")
                        .WithMany()
                        .HasForeignKey("KGSValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "KRW")
                        .WithMany()
                        .HasForeignKey("KRWValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "KZT")
                        .WithMany()
                        .HasForeignKey("KZTValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "MDL")
                        .WithMany()
                        .HasForeignKey("MDLValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "NOK")
                        .WithMany()
                        .HasForeignKey("NOKValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "PLN")
                        .WithMany()
                        .HasForeignKey("PLNValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "RON")
                        .WithMany()
                        .HasForeignKey("RONValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "SEK")
                        .WithMany()
                        .HasForeignKey("SEKValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "SGD")
                        .WithMany()
                        .HasForeignKey("SGDValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "TJS")
                        .WithMany()
                        .HasForeignKey("TJSValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "TMT")
                        .WithMany()
                        .HasForeignKey("TMTValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "TRY")
                        .WithMany()
                        .HasForeignKey("TRYValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "UAH")
                        .WithMany()
                        .HasForeignKey("UAHValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "USD")
                        .WithMany()
                        .HasForeignKey("USDValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "UZS")
                        .WithMany()
                        .HasForeignKey("UZSValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "XDR")
                        .WithMany()
                        .HasForeignKey("XDRValuteValueId");

                    b.HasOne("ModelCourse.ValuteValue", "ZAR")
                        .WithMany()
                        .HasForeignKey("ZARValuteValueId");

                    b.Navigation("AMD");

                    b.Navigation("AUD");

                    b.Navigation("AZN");

                    b.Navigation("BGN");

                    b.Navigation("BRL");

                    b.Navigation("BYN");

                    b.Navigation("CAD");

                    b.Navigation("CHF");

                    b.Navigation("CNY");

                    b.Navigation("CZK");

                    b.Navigation("DKK");

                    b.Navigation("EUR");

                    b.Navigation("GBP");

                    b.Navigation("HKD");

                    b.Navigation("HUF");

                    b.Navigation("INR");

                    b.Navigation("JPY");

                    b.Navigation("KGS");

                    b.Navigation("KRW");

                    b.Navigation("KZT");

                    b.Navigation("MDL");

                    b.Navigation("NOK");

                    b.Navigation("PLN");

                    b.Navigation("RON");

                    b.Navigation("SEK");

                    b.Navigation("SGD");

                    b.Navigation("TJS");

                    b.Navigation("TMT");

                    b.Navigation("TRY");

                    b.Navigation("UAH");

                    b.Navigation("USD");

                    b.Navigation("UZS");

                    b.Navigation("XDR");

                    b.Navigation("ZAR");
                });
#pragma warning restore 612, 618
        }
    }
}
